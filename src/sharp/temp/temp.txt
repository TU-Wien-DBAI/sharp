switch(this->type)
	{
		case LazySolutionSetType::LazyCrossJoin:
			this->value = new SolutionSet();
			
			for(SolutionSet::iterator i = this->leftArgument->solutions().begin(); i != this->leftArgument->solutions().end(); ++i)
			{
				for(SolutionSet::iterator j = this->rightArgument->solutions().begin(); j != this->rightArgument->solutions().end(); ++j)
				{
					Solution ns = *i;
					ns.insert(j->begin(), j->end());
					this->value->insert(ns);
				}
			}

			break;

		case LazyUnion:
			this->type = Value;

			this->value = &this->leftArgument->solutions();
			this->value->insert(this->rightArgument->solutions().begin(), this->rightArgument->solutions().end());			

			break;

		case LazyAddDifference:
			this->type = Value;

			this->value = new SolutionSet();

			for(SolutionSet::iterator i = this->leftArgument->solutions().begin(); i != this->leftArgument->solutions().end(); ++i)
			{ 
				Solution temp(*i); 
				temp.insert(this->differenceVariable); 
				this->value->insert(temp);
			}
			
			break;

		default:
			CNULL(NULL);
			break;
	}
}


